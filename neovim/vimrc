" With a map leader it's possible to do extra key combinations
" like <leader>w saves the current file
let mapleader = ","
let g:mapleader = ","

" Python virtualenvs
"
let g:python_host_prog=$HOME."/.pyenv/versions/neovim2/bin/python"
let g:python3_host_prog=$HOME."/.pyenv/versions/neovim3/bin/python"

call plug#begin('~/.vim/plugged')

" True Color
"
set termguicolors

Plug 'tpope/vim-surround'
Plug 'sbdchd/neoformat'

Plug 'junegunn/rainbow_parentheses.vim'
let g:rainbow#max_level = 16
let g:rainbow#pairs = [['(', ')'], ['[', ']'], ['{', '}']]
" List of colors that you do not want. ANSI code or #RRGGBB
let g:rainbow#blacklist = [233, 234]
augroup rainbow_lisp
  autocmd!
  autocmd FileType lisp,clojure,scheme,python RainbowParentheses
augroup END

Plug 'Raimondi/delimitMate'
Plug 'airblade/vim-gitgutter'
Plug 'joshdick/onedark.vim'

" Snippets
Plug 'SirVer/ultisnips'
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<c-b>"
let g:UltiSnipsJumpBackwardTrigger="<c-z>"
Plug 'greg-js/vim-react-es6-snippets', { 'for': 'javascript' }

" Python
"
Plug 'hdima/python-syntax', { 'for': 'python' }
let python_highlight_all = 1
Plug 'zchee/deoplete-jedi', { 'for': 'python' }

Plug 'vim-scripts/vim-auto-save'
let g:auto_save = 1                 " enable AutoSave on Vim startup
let g:auto_save_in_insert_mode = 0  " Disable on insert mode

" JavaScript 
"
Plug 'othree/yajs.vim', { 'for': 'javascript' }
Plug 'othree/es.next.syntax.vim', { 'for': 'javascript' }
Plug 'othree/javascript-libraries-syntax.vim', { 'for': 'javascript' }
Plug 'pangloss/vim-javascript', { 'for': 'javascript' }
Plug 'mxw/vim-jsx', { 'for': 'javascript' }

let g:used_javascript_libs = 'underscore,react,chai'
let g:jsx_ext_required = 0

au FileType javascript setl sw=2 sts=2 et
au FileType javascript.jsx setl sw=2 sts=2 et


" TypeScript
"
Plug 'HerringtonDarkholme/yats.vim', { 'for': 'typescript' }
Plug 'mhartington/nvim-typescript', {'for': ['typescript', 'tsx'], 'do': './install.sh' }
let g:ale_fixers = {'javascript': ['prettier']}

au FileType typescript setl sw=2 sts=2 et

" CoffeeScript
"
Plug 'kchmck/vim-coffee-script', { 'for': 'coffee' }

" SugarSS
"
Plug 'hhsnopek/vim-sugarss', { 'for': 'sugarss' }


" Snippets
Plug 'isRuslan/vim-es6', { 'for': 'javascript' }

" Plug 'tpope/vim-obsession'
Plug 'christoomey/vim-tmux-navigator'
if has('nvim')
  nmap <bs> :<c-u>TmuxNavigateLeft<cr>
endif

" HTML
"
Plug 'mattn/emmet-vim', { 'for': 'html' }
autocmd Filetype html setlocal ts=2 sts=2 sw=2

" Golang
"
" Tabbing and Spacing 
"
au FileType go set noexpandtab
au FileType go set shiftwidth=4
au FileType go set softtabstop=4
au FileType go set tabstop=4
"
"
Plug 'fatih/vim-go', { 'for': 'go', 'do': ':GoUpdateBinaries' }
" :=, ==, -= 
let g:go_highlight_operators = 1

" // +build linux,386 darwin,!cgo
let g:go_highlight_build_constraints = 1

" // highlight common library types io.Reader
let g:go_highlight_extra_types = 1

" highlight struct field names
let g:go_highlight_fields = 1

let g:go_highlight_functions = 1
let g:go_highlight_function_calls = 1
"let g:go_highlight_structs = 1

let g:go_highlight_types = 1

"  highlighting variables that are the same.
let g:go_auto_sameids = 1
" autoimport deps
let g:go_fmt_command = "goimports"
" automatic type info
let g:go_auto_type_info = 1

" needs to be .config for neovim
"
" Plug 'nsf/gocode', { 'rtp': 'nvim', 'do': '~/.config/nvim/plugged/gocode/nvim/symlink.sh' }
Plug 'zchee/deoplete-go', { 'do': 'make'}

" Terraform
"
Plug 'hashivim/vim-terraform', { 'for': 'terraform' }

" Linting
"
Plug 'w0rp/ale'

" Color
"
Plug 'chrisbra/Colorizer', { 'for': 'css' }

" YAML
" 
autocmd FileType yaml setlocal ts=2 sts=2 sw=2 expandtab

" TOML
"
Plug 'cespare/vim-toml', { 'for': 'toml' }

" Yank killring
"
Plug 'bfredl/nvim-miniyank'

" Autocompletion
"
Plug 'Shougo/deoplete.nvim'
let g:deoplete#enable_at_startup = 1

" Vim Journal
"
Plug 'junegunn/vim-journal', { 'for': 'journal' }
au BufNewFile,BufRead *.journal set filetype=journal

" Emojis
"
Plug 'fszymanski/deoplete-emoji', { 'for': ['markdown', 'gitcommit', 'journal'] }

" Aligner
"
Plug 'junegunn/vim-easy-align'

" Start interactive EasyAlign in visual mode (e.g. vipga)
xmap ga <Plug>(EasyAlign)

" Start interactive EasyAlign for a motion/text object (e.g. gaip)
nmap ga <Plug>(EasyAlign)

" FZF
"
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'

nnoremap <silent> <leader><space> :Files<CR>
nnoremap <silent> <leader>a :Buffers<CR>
nnoremap <silent> <leader>A :Windows<CR>
nnoremap <silent> <leader>; :BLines<CR>
nnoremap <silent> <leader>o :BTags<CR>
nnoremap <silent> <leader>O :Tags<CR>
nnoremap <silent> <leader>? :History<CR>



" Goyo
"
Plug 'junegunn/goyo.vim', { 'for': 'markdown' }
Plug 'reedes/vim-pencil', { 'for': 'markdown' }
Plug 'godlygeek/tabular', { 'for': 'markdown' }
Plug 'plasticboy/vim-markdown', { 'for': 'markdown'}

au! BufRead,BufNewFile *.markdown set filetype=mkd
au! BufRead,BufNewFile *.md       set filetype=mkd

" function! s:auto_goyo()
"   if &ft == 'mkd'
"     Goyo 80
"   elseif exists('#goyo')
"     let bufnr = bufnr('%')
"     Goyo!
"     execute 'b '.bufnr
"   endif
" endfunction
" 
" augroup goyo_markdown
"   autocmd!
"   autocmd BufNewFile,BufRead * call s:auto_goyo()
" augroup END
" 
" function! s:goyo_enter()
"   let b:quitting = 0
"   let b:quitting_bang = 0
"   autocmd QuitPre <buffer> let b:quitting = 1
"   cabbrev <buffer> q! let b:quitting_bang = 1 <bar> q!
" endfunction
" 
" function! s:goyo_leave()
"   " Quit Vim if this is the only remaining buffer
"   if b:quitting && len(filter(range(1, bufnr('$')), 'buflisted(v:val)')) == 1
"     if b:quitting_bang
"       qa!
"     else
"       qa
"     endif
"   endif
" endfunction
" 
" autocmd! User GoyoEnter call <SID>goyo_enter()
" autocmd! User GoyoLeave call <SID>goyo_leave()

" ix.io
" Paste to public URL
noremap <leader>i :w !ix<CR>

" On demand loading
Plug 'scrooloose/nerdtree', { 'on':  'NERDTreeToggle' }
map <C-n> :NERDTreeToggle<CR>
let NERDTreeIgnore = ['\.pyc$', 'venv', '__pycache__']

" Add plugins to &runtimepath
call plug#end()

" General
"
set autowrite
set history=700

" Enable filetype plugins
filetype plugin on
filetype indent on

" Set to auto read when a file is changed from the outside
set autoread

" Fast saving
nmap <leader>w :w!<cr>

" Terminal
"
tnoremap kj <C-\><C-n>

" UI
"
" Set 7 lines to the cursor - when moving vertically using j/k
set so=7

" show them numbers
set number

" no status line
set laststatus=0

" Ignore compiled files
set wildignore=*.o,*~,*.pyc

"Always show current position
set ruler

" A buffer becomes hidden when it is abandoned
set hid

" Configure backspace so it acts as it should act
set backspace=eol,start,indent
set whichwrap+=<,>,h,l

" Ignore case when searching
set ignorecase

" When searching try to be smart about cases
set smartcase

" Makes search act like search in modern browsers
set incsearch

" Don't redraw while executing macros (good performance config)
set lazyredraw

" For regular expressions turn magic on
set magic

" Show matching brackets when text indicator is over them
set showmatch

" How many tenths of a second to blink when matching brackets
set mat=2

" No annoying sound on errors
set noerrorbells
set novisualbell
set t_vb=
set tm=500

" Colors and Font
" ---------------------------
"
" Enable syntax highlighting
syntax enable

" set utf8 as standard encoding and en_US as the standard language
set encoding=utf8

" Use Unix as the standard file type
set ffs=unix,dos,mac

" colorscheme
colorscheme onedark
set background=dark

" Files, backups, and undo
" ----------------------------------------------------------------
"
" Turn backup off, since most stuff is in SVN, git et.c anyway...
set nobackup
set nowb
set noswapfile

" Text, tab and indents
"
" ---------------------------
" Use spaces instead of tabs
set expandtab

" Be smart when using tabs ;)
set smarttab

" 1 tab == 4 spaces
set shiftwidth=4
set tabstop=4

" Linebreak on 80 characters
set lbr
set tw=80

set ai "Auto indent
set si "Smart indent
set wrap "Wrap lines

fun! TrimWhitespace()
    let l:save_cursor = getpos('.')
    %s/\s\+$//e
    call setpos('.', l:save_cursor)
endfun

" Visual mode
" ---------------------------------------------------------------
" Visual mode pressing * or # searches for the current selection
" Super useful! From an idea by Michael Naumann
vnoremap <silent> * :call VisualSelection('f')<CR>
vnoremap <silent> # :call VisualSelection('b')<CR>

" Moving around, tabs, windows and buffers
" -----------------------------------------
"  Treat long lines as break lines
map j gj
map k gk

" Map <Space> to / (search) and Ctrl-<Space> to ? (backwards search)
map <space> /
map <c-space> ?

" Disable highlight when <leader><cr> is pressed
map <silent> <leader><cr> :noh<cr>

" Smart way to move between windows
map <C-j> <C-W>j
map <C-k> <C-W>k
map <C-h> <C-W>h
map <C-l> <C-W>l

" Close the current buffer
map <leader>bd :Bclose<cr>

" Close all the buffers
map <leader>ba :1,1000 bd!<cr>

" Return to last edit position when opening files (You want this!)
autocmd BufReadPost *
     \ if line("'\"") > 0 && line("'\"") <= line("$") |
     \   exe "normal! g`\"" |
     \ endif
" Remember info about open buffers on close
set viminfo^=%

" Edit mappings
" --------------
" Remap VIM 0 to first non-blank character
map 0 ^
inoremap jk <esc>

" Move a line of text using ALT+[jk] or Comamnd+[jk] on mac
" ˙∆ keys for mac os x
nmap ∆ mz:m+<cr>`z
nmap ˚ mz:m-2<cr>`z
vmap ∆ :m'>+<cr>`<my`>mzgv`yo`z
vmap ˚ :m'<-2<cr>`>my`<mzgv`yo`z

if has("mac") || has("macunix")
  nmap <D-j> <M-j>
  nmap <D-k> <M-k>
  vmap <D-j> <M-j>
  vmap <D-k> <M-k>
endif

" Delete trailing white space on save, useful for Python and CoffeeScript ;)
func! DeleteTrailingWS()
  exe "normal mz"
  %s/\s\+$//ge
  exe "normal `z"
endfunc

autocmd BufWrite *.py :call DeleteTrailingWS()
autocmd BufWrite *.coffee :call DeleteTrailingWS()
autocmd BufWrite *.js :call DeleteTrailingWS()
autocmd BufWrite *.ts :call DeleteTrailingWS()

" Save on buffer move or lost focus
autocmd BufLeave,FocusLost * silent! wall

" Spell Checking
" -----------------
" Pressing ,ss will toggle and untoggle spell checking
map <leader>ss :setlocal spell!<cr>

" Shortcuts using <leader>
map <leader>sn ]s
map <leader>sp [s
map <leader>sa zg
map <leader>s? z=


" Helper functions
" -------------------------------------------
" Don't close window, when deleting a buffer
command! Bclose call <SID>BufcloseCloseIt()
function! <SID>BufcloseCloseIt()
   let l:currentBufNum = bufnr("%")
   let l:alternateBufNum = bufnr("#")

   if buflisted(l:alternateBufNum)
     buffer #
   else
     bnext
   endif

   if bufnr("%") == l:currentBufNum
     new
   endif

   if buflisted(l:currentBufNum)
     execute("bdelete! ".l:currentBufNum)
   endif
endfunction

" Misc
" ------------------------------------
" Quickly open a buffer for scripbble
map <leader>q :e ~/buffer<cr>

" Toggle paste mode on and off
map <leader>pp :setlocal paste!<cr>
