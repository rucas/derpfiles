" set utf-8 as standard encoding and en_US as the standard language
set encoding=utf-8
scriptencoding utf-8

" create a vimrc group and initialize
augroup vimrc
  autocmd!
augroup END


" With a map leader it's possible to do extra key combinations
" like <leader>w saves the current file
let mapleader = ','
let g:mapleader = ','

" Python virtualenvs
"
let g:python_host_prog=$HOME.'/.pyenv/versions/neovim2/bin/python'
let g:python3_host_prog=$HOME.'/.pyenv/versions/neovim3/bin/python'

call plug#begin('~/.vim/plugged')

" True Color
"
" do not set for pywal
set termguicolors

Plug 'junegunn/rainbow_parentheses.vim'
let g:rainbow#max_level = 16
let g:rainbow#pairs = [['(', ')'], ['[', ']'], ['{', '}']]
" List of colors that you do not want. ANSI code or #RRGGBB
let g:rainbow#blacklist = [233, 234]
autocmd vimrc FileType lisp,clojure,scheme,python,scala,vim RainbowParentheses

" ACCESSIBILITY
"
Plug 'tpope/vim-surround'
Plug 'mhinz/vim-signify'
Plug 'tmsvg/pear-tree'

"
"" Autosave
"
autocmd vimrc CursorHold * update
" Save on buffer move or lost focus
" autocmd BufLeave,FocusLost * silent! wall

" TODO: FIX THIS SHIT
Plug 'christoomey/vim-tmux-navigator'
if has('nvim')
  nmap <bs> :<c-u>TmuxNavigateLeft<cr>
endif

"" FZF
"
Plug '/usr/local/opt/fzf'
Plug 'junegunn/fzf.vim'

nnoremap <silent> <leader><space> :Files<CR>
nnoremap <silent> <leader>g :Rg<CR>
nnoremap <silent> <leader>a :Buffers<CR>
nnoremap <silent> <leader>A :Windows<CR>
nnoremap <silent> <leader>; :BLines<CR>
nnoremap <silent> <leader>o :BTags<CR>
nnoremap <silent> <leader>O :Tags<CR>
nnoremap <silent> <leader>? :History<CR>


" fzf window
let g:fzf_layout = { 'window': 'bo 10split enew' }

" Customize fzf colors to match your color scheme
let g:fzf_colors =
  \ { 'fg':      ['fg', 'Normal'],
  \ 'bg':      ['bg', 'Normal'],
  \ 'hl':      ['fg', 'Comment'],
  \ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
  \ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
  \ 'hl+':     ['fg', 'Statement'],
  \ 'info':    ['fg', 'PreProc'],
  \ 'border':  ['fg', 'Ignore'],
  \ 'prompt':  ['fg', 'Conditional'],
  \ 'pointer': ['fg', 'Exception'],
  \ 'marker':  ['fg', 'Keyword'],
  \ 'spinner': ['fg', 'Label'],
  \ 'header':  ['fg', 'Comment'] }

" jump to the existing window if possible
let g:fzf_buffers_jump = 1

" COLORS
"
Plug 'joshdick/onedark.vim'
" TODO add vim colorscheme plugin
" Plug 'dylanaraps/wal.vim'

" Python
"
Plug 'hdima/python-syntax', { 'for': 'python' }
Plug 'zchee/deoplete-jedi', { 'for': 'python' }

let python_highlight_all = 1

" JavaScript
"
Plug 'othree/yajs.vim'                           , { 'for': 'javascript' }
Plug 'othree/es.next.syntax.vim'                 , { 'for': 'javascript' }
Plug 'othree/javascript-libraries-syntax.vim'    , { 'for': 'javascript' }
Plug 'pangloss/vim-javascript'                   , { 'for': 'javascript' }
Plug 'mxw/vim-jsx'                               , { 'for': 'javascript' }

let g:used_javascript_libs = 'react'
let g:jsx_ext_required = 0

autocmd vimrc FileType javascript     setl sw=2 sts=2 et
autocmd vimrc FileType javascript.jsx setl sw=2 sts=2 et

" LSP
"
Plug 'autozimu/LanguageClient-neovim', {
  \ 'branch': 'next',
  \ 'do': 'bash install.sh',
  \ }

let g:LanguageClient_serverCommands = {
    \ 'scala': ['metals-vim'],
    \ }

" Setting the windowLevelMessageLevel to 'Log' helps to see things like 'compiling 32%'.
let g:LanguageClient_windowLogMessageLevel = 'Log'

" Having LogMessageLevel set to Log interferes with non-preview
" displaying of Hover
let g:LanguageClient_hoverPreview = 'Always'
"
" note that if you are using Plug mapping you should not use `noremap` mappings.
nmap <F5> <Plug>(lcn-menu)
" Or map each action separately
nmap <silent>K <Plug>(lcn-hover)
nmap <silent> gd <Plug>(lcn-definition)
nmap <silent> <F2> <Plug>(lcn-rename)


" COMPLETION FRAMEWORK
"
Plug 'ncm2/ncm2'
Plug 'roxma/nvim-yarp'

" enable ncm2 for all buffers
autocmd vimrc BufEnter * call ncm2#enable_for_buffer()

" IMPORTANT: :help Ncm2PopupOpen for more information
set completeopt=noinsert,menuone,noselect

" NOTE: you need to install completion sources to get completions. Check
" our wiki page for a list of sources: https://github.com/ncm2/ncm2/wiki
Plug 'ncm2/ncm2-bufword'
Plug 'ncm2/ncm2-path'
Plug 'ncm2/ncm2-github'


Plug 'liuchengxu/vista.vim'

" Bash
"
autocmd vimrc Filetype sh setlocal ts=2 sts=2 sw=2

" JSON
"
Plug 'elzr/vim-json', { 'for': 'json' }
autocmd vimrc Filetype json setlocal ts=2 sts=2 sw=2

" Scala
"
Plug 'derekwyatt/vim-scala', { 'for': 'scala' }
autocmd vimrc BufRead,BufNewFile *.sbt set filetype=scala

" TypeScript
"
Plug 'HerringtonDarkholme/yats.vim', { 'for': 'typescript' }

autocmd vimrc FileType typescript setl sw=2 sts=2 et

" CoffeeScript
"
Plug 'kchmck/vim-coffee-script', { 'for': 'coffee' }

" Plug 'tpope/vim-obsession'
"

" HTML
"
Plug 'mattn/emmet-vim', { 'for': 'html' }
autocmd vimrc Filetype html setlocal ts=2 sts=2 sw=2

" Terraform
"
Plug 'hashivim/vim-terraform', { 'for': 'terraform' }

" PGSQL
"
Plug 'lifepillar/pgsql.vim', { 'for': 'sql' }

" Linting
"
Plug 'w0rp/ale'
let g:ale_fixers = {
\   '*': ['remove_trailing_lines', 'trim_whitespace'],
\   'sql': ['sqlint'],
\   'javascript': ['prettier'],
\}

" Color
"
Plug 'chrisbra/Colorizer', { 'for': 'css' }

" YAML
"
autocmd vimrc FileType yaml setlocal ts=2 sts=2 sw=2 expandtab

" TOML
"
Plug 'cespare/vim-toml', { 'for': 'toml' }

" Aligner
"
Plug 'junegunn/vim-easy-align'

" Start interactive EasyAlign in visual mode (e.g. vipga)
xmap ga <Plug>(EasyAlign)

" Start interactive EasyAlign for a motion/text object (e.g. gaip)
nmap ga <Plug>(EasyAlign)

" Markdown
" -------------------------------------------------------
Plug 'junegunn/goyo.vim'        , { 'for': 'markdown' }
Plug 'reedes/vim-pencil'        , { 'for': 'markdown' }
Plug 'godlygeek/tabular'        , { 'for': 'markdown' }
Plug 'plasticboy/vim-markdown'  , { 'for': 'markdown' }

autocmd! vimrc BufRead,BufNewFile *.markdown set filetype=markdown
autocmd! vimrc BufRead,BufNewFile *.md       set filetype=markdown

Plug 'mcchrish/nnn.vim'
" Opens the nnn window in a split
let g:nnn#layout = 'new' " or vnew, tabnew etc.

" Or pass a dictionary with window size
let g:nnn#layout = { 'left': '~20%' } " or right, up, down

" Floating window (neovim)
function! s:layout()
  let buf = nvim_create_buf(v:false, v:true)

  let height = &lines - (float2nr(&lines / 3))
  let width = float2nr(&columns - (&columns * 2 / 3))

  let opts = {
        \ 'relative': 'editor',
        \ 'row': 2,
        \ 'col': 8,
        \ 'width': width,
        \ 'height': height
        \ }

  call nvim_open_win(buf, v:true, opts)
endfunction
let g:nnn#layout = 'call ' . string(function('<SID>layout')) . '()'

" Add plugins to &runtimepath
call plug#end()

" General
"
set autowrite
set history=700

" Enable filetype plugins
filetype plugin on
filetype indent on

" Set to auto read when a file is changed from the outside
set autoread

" Fast saving
nmap <leader>w :w!<cr>

" UI
"
" Set 7 lines to the cursor - when moving vertically using j/k
set scrolloff=7

" show them numbers
set number

" no status line
set laststatus=0

" Ignore compiled files
set wildignore=*.o,*~,*.pyc

"Always show current position
set ruler

" A buffer becomes hidden when it is abandoned
set hidden

" Configure backspace so it acts as it should act
set backspace=eol,start,indent
set whichwrap+=<,>,h,l

" Ignore case when searching
set ignorecase

" When searching try to be smart about cases
set smartcase

" Makes search act like search in modern browsers
set incsearch

" Don't redraw while executing macros (good performance config)
set lazyredraw

" For regular expressions turn magic on
set magic

" Show matching brackets when text indicator is over them
set showmatch

" How many tenths of a second to blink when matching brackets
set matchtime=2

" No annoying sound on errors
set noerrorbells
set novisualbell
set t_vb=
set timeoutlen=500
set updatetime=300

" don't give |ins-completion-menu| messages.
set shortmess+=c

" always show signcolumn
set signcolumn=yes

" Colors and Font
" ---------------------------
"
" Enable syntax highlighting
syntax enable


" Use Unix as the standard file type
set fileformats=unix,dos,mac

" colorscheme
colorscheme onedark
set background=dark

" Files, backups, and undo
" ----------------------------------------------------------------
"
" Turn backup off, since most stuff is in SVN, git et.c anyway...
set nobackup
set nowritebackup
set noswapfile

" Text, tab and indents
"
" ---------------------------
" Use spaces instead of tabs
set expandtab

" Be smart when using tabs ;)
set smarttab

" 1 tab == 4 spaces
set shiftwidth=4
set tabstop=4

" Linebreak on 80 characters
set linebreak
set textwidth=80

set autoindent      " Auto indent
set smartindent     " Smart indent
set wrap            " Wrap lines

" Visual mode
" ---------------------------------------------------------------
" Visual mode pressing * or # searches for the current selection
" Super useful! From an idea by Michael Naumann
vnoremap <silent> * :call VisualSelection('f')<CR>
vnoremap <silent> # :call VisualSelection('b')<CR>

" Moving around, tabs, windows and buffers
" -----------------------------------------
"  Treat long lines as break lines
map j gj
map k gk

" Map <Space> to / (search) and Ctrl-<Space> to ? (backwards search)
map <space> /
map <c-space> ?

" Disable highlight when <leader><cr> is pressed
map <silent> <leader><cr> :noh<cr>

" Smart way to move between windows
map <C-j> <C-W>j
map <C-k> <C-W>k
map <C-h> <C-W>h
map <C-l> <C-W>l

" TODO: do we really need bclose function
" Close the current buffer
map <leader>bd :Bclose<cr>

" Close all the buffers
map <leader>ba :1,1000 bd!<cr>

" Return to last edit position when opening files (You want this!)
autocmd vimrc BufReadPost *
     \ if line("'\"") > 0 && line("'\"") <= line("$") |
     \   exe "normal! g`\"" |
     \ endif
" Remember info about open buffers on close
set viminfo^=%

" Edit mappings
" --------------
" Remap VIM 0 to first non-blank character
map 0 ^
inoremap jk <esc>

" Move a line of text using ALT+[jk] or Comamnd+[jk] on mac
" ˙∆ keys for mac os x
" nmap ∆ mz:m+<cr>`z
" nmap ˚ mz:m-2<cr>`z
" vmap ∆ :m'>+<cr>`<my`>mzgv`yo`z
" vmap ˚ :m'<-2<cr>`>my`<mzgv`yo`z
" 
" if has("mac") || has("macunix")
"   nmap <D-j> <M-j>
"   nmap <D-k> <M-k>
"   vmap <D-j> <M-j>
"   vmap <D-k> <M-k>
" endif


" Spell Checking
" -----------------
" Pressing ,ss will toggle and untoggle spell checking
map <leader>ss :setlocal spell!<cr>

" Shortcuts using <leader> for spelling
map <leader>sn ]s
map <leader>sp [s
map <leader>sa zg
map <leader>s? z=

" Helper functions
" -------------------------------------------
" Don't close window, when deleting a buffer
command! Bclose call <SID>BufcloseCloseIt()
function! <SID>BufcloseCloseIt()
   let l:currentBufNum = bufnr('%')
   let l:alternateBufNum = bufnr('#')

   if buflisted(l:alternateBufNum)
     buffer #
   else
     bnext
   endif

   if bufnr('%') == l:currentBufNum
     new
   endif

   if buflisted(l:currentBufNum)
     execute('bdelete! '.l:currentBufNum)
   endif
endfunction

" Misc
" ------------------------------------
" Quickly open a buffer for scripbble
map <leader>q :e ~/buffer<cr>

" Toggle paste mode on and off
map <leader>pp :setlocal paste!<cr>
